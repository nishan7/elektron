services:
  backend:
    image: nishanpaudel/elektron-backend
    command: [ "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload" ]
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - MONGO_URI=mongodb://root:example@mongo:27017/elektron?authSource=admin
      - KAFKA_BOOTSTRAP_SERVER=kafka:9092
    depends_on:
      - mongo
      - mongo-express

  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: [ "bash", "scheduler/run_scripts.sh" ]
    volumes:
      - ./backend:/app
    environment:
      - MONGO_URI=mongodb://root:example@mongo:27017/elektron?authSource=admin
      - KAFKA_BOOTSTRAP_SERVER=kafka:9092
    depends_on:
      - kafka  #   Ensure Kafka starts before backend


  frontend:
    image: nishanpaudel/elektron-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - backend



  kafka:
      # Use a recent stable Bitnami Kafka image
      image: docker.io/bitnami/kafka:3.7 # Using a slightly newer version

      # Give your container a predictable name and service name 'kafka'
      container_name: kafka_single_node
      # The service name 'kafka' allows other containers in the network to reach it by this name

      # Map the client port (9092) from the container to the host.
      # Local clients on your host machine will connect to localhost:9092.
      # Other containers will use the internal Docker network address (kafka:9092).
      ports:
        - "9092:9092"
        - "9093:9093" # Controller port

      environment:
        # --- KRaft Configuration ---
        - KAFKA_ENABLE_KRAFT=yes
        # This node acts as both a broker and a controller
        - KAFKA_CFG_PROCESS_ROLES=broker,controller
        # Assign a unique ID to this node
        - KAFKA_CFG_NODE_ID=1
        # Define the quorum voters for the controller.
        - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9094
        # --- Listener Configuration ---
        # Define the listeners Kafka will bind to *inside* the container.
        # CLIENT://:9092 binds the 'CLIENT' listener to all network interfaces on port 9092 (for both host and internal network access)
        # CONTROLLER://127.0.0.1:9094 binds the 'CONTROLLER' listener to localhost on port 9094 (internal KRaft communication)
        - KAFKA_CFG_LISTENERS=CLIENT://0.0.0.0:9093,INTERNAL://:9092,CONTROLLER://127.0.0.1:9094
        # Map the listener names to security protocols
        - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT
        # This is crucial! It tells clients how to connect back.
        # Advertise both the 'localhost' address (for the Docker host)
        # AND the 'kafka' service name (for other containers in the network).
        - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://localhost:9093, INTERNAL://kafka:9092
        # Specify which listener is used for controller communication
        - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
        # Set the inter-broker listener name (required even for single node)
        - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
        # --- Other Configurations ---
        - ALLOW_PLAINTEXT_LISTENER=yes
        - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
        - KAFKA_CFG_NUM_PARTITIONS=1
        # Optional: Enable Bitnami debug logs
        #- BITNAMI_DEBUG=yes

      # Persist Kafka data
      volumes:
        - kafka_data:/bitnami/kafka

        # Ensure the container restarts if it fails
#      restart: always

# Define the named volume for persistence

  mongo:
    image: mongo:6.0
    container_name: mongo-elektron
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongodb_data:/data/db

  mongo-express:
    image: mongo-express
    container_name: mongo-express-elektron
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_SERVER: mongo
    depends_on:
      - mongo


volumes:
  mongodb_data:
  kafka_data:
    driver: local
